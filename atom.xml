<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>krasie&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://krasie.github.io/"/>
  <updated>2018-09-25T08:26:22.808Z</updated>
  <id>http://krasie.github.io/</id>
  
  <author>
    <name>krasie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac 使用 brew 安装 dnsmasq</title>
    <link href="http://krasie.github.io/2017/12/21/brew-install-dnsmasq/"/>
    <id>http://krasie.github.io/2017/12/21/brew-install-dnsmasq/</id>
    <published>2017-12-21T05:14:01.000Z</published>
    <updated>2018-09-25T08:26:22.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不要更改-etc-hosts-文件"><a href="#不要更改-etc-hosts-文件" class="headerlink" title="不要更改 /etc/hosts 文件"></a>不要更改 /etc/hosts 文件</h1><blockquote><p>要设置您的计算机使用 *.test 域名，例如 project.test，awesome.test 等，而不必每次都修改 host 文件。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>macOS Sierra</li><li><a href="http://mxcl.github.io/homebrew/" target="_blank" rel="noopener">Homebrew</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install dnsmasq</span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="创建配置目录"><a href="#创建配置目录" class="headerlink" title="创建配置目录"></a>创建配置目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv $(brew --prefix)/etc/</span><br></pre></td></tr></table></figure><h3 id="设置重定向-test"><a href="#设置重定向-test" class="headerlink" title="设置重定向 *.test"></a>设置重定向 *.test</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;address=/.dev/127.0.0.1&apos; &gt; $(brew --prefix)/etc/dnsmasq.conf</span><br></pre></td></tr></table></figure><p>You should probably add <code>strict-order</code> to <code>dnsmasq.conf</code> to keep nameserver order of <code>resolv.conf</code> (<a href="https://gist.github.com/drye/5387341" target="_blank" rel="noopener">see here</a>).</p><h2 id="设置自动启动"><a href="#设置自动启动" class="headerlink" title="设置自动启动"></a>设置自动启动</h2><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -v $(brew --prefix dnsmasq)/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons</span><br></pre></td></tr></table></figure><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist</span><br></pre></td></tr></table></figure><h2 id="添加到解析"><a href="#添加到解析" class="headerlink" title="添加到解析"></a>添加到解析</h2><h3 id="创建解析目录"><a href="#创建解析目录" class="headerlink" title="创建解析目录"></a>创建解析目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -v /etc/resolver</span><br></pre></td></tr></table></figure><h3 id="把域名添加到解析"><a href="#把域名添加到解析" class="headerlink" title="把域名添加到解析"></a>把域名添加到解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c &apos;echo &quot;nameserver 127.0.0.1&quot; &gt; /etc/resolver/dev&apos;</span><br></pre></td></tr></table></figure><h2 id="设置系统-DNS"><a href="#设置系统-DNS" class="headerlink" title="设置系统 DNS"></a>设置系统 DNS</h2><p>把 127.0.0.1 设为最高优先级。</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>你可以使用 <code>scutil --dns</code> 命令查看你的全部解析。</p><blockquote><p>以后可以直接再 nginx 使用 *.test 域名即可，默认指向 127.0.0.1。不需再修改 /etc/hosts 文件。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不要更改-etc-hosts-文件&quot;&gt;&lt;a href=&quot;#不要更改-etc-hosts-文件&quot; class=&quot;headerlink&quot; title=&quot;不要更改 /etc/hosts 文件&quot;&gt;&lt;/a&gt;不要更改 /etc/hosts 文件&lt;/h1&gt;&lt;blockquote
      
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用 Charles 抓取手机 https</title>
    <link href="http://krasie.github.io/2017/11/04/charles-https/"/>
    <id>http://krasie.github.io/2017/11/04/charles-https/</id>
    <published>2017-11-04T07:27:50.000Z</published>
    <updated>2017-11-21T09:02:44.664Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Charles-安装"><a href="#Charles-安装" class="headerlink" title="Charles 安装"></a>Charles 安装</h4><p>官网下载安装Charles:<br><a href="https://www.charlesproxy.com/download/" target="_blank" rel="noopener">https://www.charlesproxy.com/download/</a></p><h4 id="HTTP-抓包"><a href="#HTTP-抓包" class="headerlink" title="HTTP 抓包"></a>HTTP 抓包</h4><p>安装后启动 Charles。手机设置代理为 Charles 的 ip ，默认端口为 8888 ,可以自己修改。</p><h4 id="HTTPS-抓包"><a href="#HTTPS-抓包" class="headerlink" title="HTTPS 抓包"></a>HTTPS 抓包</h4><h6 id="安装-SSL-证书到手机设备"><a href="#安装-SSL-证书到手机设备" class="headerlink" title="安装 SSL 证书到手机设备"></a>安装 SSL 证书到手机设备</h6><ol><li>点击 Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate on a Mobile Device</li><li>在手机Safari浏览器输入地址 chls.pro/ssl，出现证书安装页面，点击安装<br>手机设置有密码的输入密码进行安装</li></ol><p><code>注意：iOS 10.3系统，需要在 设置→通用→关于本机→证书信任设置 里面启用完全信任Charles证书</code></p><h6 id="Charles-设置-Proxy"><a href="#Charles-设置-Proxy" class="headerlink" title="Charles 设置 Proxy"></a>Charles 设置 Proxy</h6><ol><li>在 Charles 打开 Proxy -&gt; SSL Proxying Settings…</li><li>勾选 Enable SSL Proxying ,点击 Add 添加域名，端口填写 443</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Charles-安装&quot;&gt;&lt;a href=&quot;#Charles-安装&quot; class=&quot;headerlink&quot; title=&quot;Charles 安装&quot;&gt;&lt;/a&gt;Charles 安装&lt;/h4&gt;&lt;p&gt;官网下载安装Charles:&lt;br&gt;&lt;a href=&quot;https://www
      
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 开启 HTTP/2</title>
    <link href="http://krasie.github.io/2017/04/12/http2-build/"/>
    <id>http://krasie.github.io/2017/04/12/http2-build/</id>
    <published>2017-04-12T01:39:15.000Z</published>
    <updated>2017-11-21T04:00:17.428Z</updated>
    
    <content type="html"><![CDATA[<p>随着 HTTPS/2 的普及，越来越多网站开启了 HTTPS/2 ，上个月也把自己的网站升级上了 HTTPS/2 。</p><a id="more"></a><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>要开启 HTTP/2 需要 Nginx 版本在 1.10.0 以上且需要 openssl 版本在 1.0.2 以上编译。</li><li>HTTP/2 只支持开启了 https 的网站</li></ol><p>服务器安装的版本刚好都符合要求，所以就直接设置好了 ssl 证书。</p><h4 id="配置-HTTP-2"><a href="#配置-HTTP-2" class="headerlink" title="配置 HTTP/2"></a>配置 HTTP/2</h4><p>配置 Nginx 开启 HTTP/2 特别简单，只要在 Nginx 配置文件中找到你要开启 HTTP/2 的域名 server 模块，然后将 <code>listen 443 ssl;</code> 改成 <code>listen 443 ssl http2;</code> 即可。</p><p>要优化nginx配置可以用 <a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/" target="_blank" rel="noopener">https://mozilla.github.io/server-side-tls/ssl-config-generator/</a> 这个生成的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 443 ssl http2;</span><br><span class="line">server_name domain.com;</span><br><span class="line"></span><br><span class="line">ssl_certificate /path/to/public.crt;</span><br><span class="line">ssl_certificate_key /path/to/private.key;</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #允许的协议 </span><br><span class="line">ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; #加密算法(CloudFlare 推荐的加密套件组) </span><br><span class="line">ssl_prefer_server_ciphers on; #优化 SSL 加密套件 </span><br><span class="line">ssl_session_timeout 10m; #客户端会话缓存时间 </span><br><span class="line">ssl_session_cache builtin:1000 shared:SSL:10m; #SSL 会话缓存类型和大小 </span><br><span class="line">ssl_buffer_size 1400; # 1400 bytes to fit in one MTU</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着 HTTPS/2 的普及，越来越多网站开启了 HTTPS/2 ，上个月也把自己的网站升级上了 HTTPS/2 。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安全加固</title>
    <link href="http://krasie.github.io/2016/12/07/linux-security/"/>
    <id>http://krasie.github.io/2016/12/07/linux-security/</id>
    <published>2016-12-07T01:21:01.000Z</published>
    <updated>2017-11-21T02:39:36.264Z</updated>
    
    <content type="html"><![CDATA[<p>记在腾讯云买了个云服务器之后做的安全优化。（ps:系统是 centos 7）</p><a id="more"></a><h4 id="新增一个普通帐号"><a href="#新增一个普通帐号" class="headerlink" title="新增一个普通帐号"></a>新增一个普通帐号</h4><p>新建一个普通账号并设置密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser xxx</span><br><span class="line">passwd xxx</span><br></pre></td></tr></table></figure><h4 id="禁止-root-使用-ssh-登入"><a href="#禁止-root-使用-ssh-登入" class="headerlink" title="禁止 root 使用 ssh 登入"></a>禁止 root 使用 ssh 登入</h4><p>在 /etc/ssh/sshd_config 寻找 <code>#PermitRootLogin yes</code>改为 <code>PermitRootLogin no</code></p><p>然后重启<code>systemctl restart sshd</code></p><p>完成后不要登出系统，使用另一个视窗尝试登入 root 和普通帐号，测试无误才行。</p><p>然后吧 sudo 权限给你新建的用户。</p><p>在文件 <code>/etc/sudoer</code> 里找到 <code>root  ALL=(ALL)    ALL</code> 在下一行添加你想要的用户 <code>xxx  ALL=(ALL)    ALL</code></p><h4 id="修改-ssh-端口"><a href="#修改-ssh-端口" class="headerlink" title="修改 ssh 端口"></a>修改 ssh 端口</h4><p>vim /etc/ssh/sshd_config</p><p><code>#Port 22</code> 改为你想要的端口</p><h4 id="启动防火墙"><a href="#启动防火墙" class="headerlink" title="启动防火墙"></a>启动防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><p>这是还有配置你修改的 ssh 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/lib/firewalld/services/ssh.xml /etc/firewalld/services/</span><br><span class="line">vi /etc/firewalld/services/ssh.xml</span><br></pre></td></tr></table></figure><p>将 <code>&lt;port protocol=&quot;tcp&quot; port=&quot;22&quot;/&gt;</code> 改为 <code>&lt;port protocol=&quot;tcp&quot; port=&quot;xxxxx&quot;/&gt;</code></p><p>重新加载 firewalld</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><code>firewall-cmd --list-all</code> 查看防火墙现在开启了哪些服务和端口,如果安装了 nginx 可以如下添加设置，开放 http 端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=http </span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="启用公钥验证登入-ssh"><a href="#启用公钥验证登入-ssh" class="headerlink" title="启用公钥验证登入 ssh"></a>启用公钥验证登入 ssh</h4><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>保持你用的系统软件更新来防止安全漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记在腾讯云买了个云服务器之后做的安全优化。（ps:系统是 centos 7）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="http://krasie.github.io/2016/12/04/linux-commonly-used-commands/"/>
    <id>http://krasie.github.io/2016/12/04/linux-commonly-used-commands/</id>
    <published>2016-12-04T03:47:11.000Z</published>
    <updated>2017-11-21T02:39:15.360Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下自己容易忘记的又比较常用 Linux 命令</p><a id="more"></a><h5 id="解压命令"><a href="#解压命令" class="headerlink" title="解压命令"></a>解压命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar –xvf <span class="comment">#解压*.tar</span></span><br><span class="line">gzip -d  <span class="comment">#或者gunzip 解压*.gz</span></span><br><span class="line">tar –xzf <span class="comment">#解压*.tar.gz和*.tgz</span></span><br><span class="line">bzip2 -d <span class="comment">#或者用bunzip2 解压*.bz2</span></span><br><span class="line">tar –xjf <span class="comment">#解压*.tar.bz2</span></span><br><span class="line">uncompress <span class="comment">#解压*.Z</span></span><br><span class="line">tar –xZf <span class="comment">#解压*.tar.Z</span></span><br><span class="line">unrar e <span class="comment">#解压*.rar</span></span><br><span class="line">unzip <span class="comment">#解压*.zip</span></span><br></pre></td></tr></table></figure><h5 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名:组名 文件路径 <span class="comment">#更改某个目录或文件的用户名和用户组</span></span><br><span class="line">chmod [who] [+ | - | =] [mode] 文件名 <span class="comment">#修改某个目录或文件的访问权限</span></span><br></pre></td></tr></table></figure><p>操作对象who可是下述字母中的任一个或者它们的组合：<br> 　　u 表示“用户（user）”，即文件或目录的所有者。<br> 　　g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。<br> 　　o 表示“其他（others）用户”。<br> 　　a 表示“所有（all）用户”。它是系统默认值。<br> 操作符号可以是：<br> 　　+ 添加某个权限。<br> 　　- 取消某个权限。<br> 　　= 赋予给定权限并取消其他所有权限（如果有的话）。<br> 设置 mode 所表示的权限可用下述字母的任意组合：<br> 　　r 可读。<br> 　　w 可写。<br> 　　x 可执行。<br> 　　X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。<br> 　　s 在文件执行时把进程的属主或组ID置为该文件的文件属主。<br>       方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。<br> 　　t 保存程序的文本到交换设备上。<br> 　　u 与文件属主拥有一样的权限。<br> 　　g 与和文件属主同组的用户拥有一样的权限。<br> 　　o 与其他用户拥有一样的权限。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下自己容易忘记的又比较常用 Linux 命令&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android APK 反编译</title>
    <link href="http://krasie.github.io/2016/11/12/android-decompile/"/>
    <id>http://krasie.github.io/2016/11/12/android-decompile/</id>
    <published>2016-11-12T15:04:01.000Z</published>
    <updated>2017-11-21T02:36:37.310Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个 app 的爬虫，发现密码竟然是加密的，模拟登录做不了，就想研究一下 Android APK 的反编译，把加密算法拿出来，发现不难。</p><a id="more"></a><h4 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h4><p>apktool<br>dex2jar<br>jd-gui</p><h4 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h4><h5 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h5><p>作用：资源文件获取，可以提取出图片文件和布局文件进行使用查看</p><h5 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h5><p>作用：将 apk 反编译成 Java 源码（classes.dex 转化成 jar 文件）</p><h5 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h5><p>作用：查看 APK 中 classes.dex 转化成出的 jar 文件，即源码文件</p><h4 id="反编译流程"><a href="#反编译流程" class="headerlink" title="反编译流程"></a>反编译流程</h4><h5 id="反编译获取资源文件"><a href="#反编译获取资源文件" class="headerlink" title="反编译获取资源文件"></a>反编译获取资源文件</h5><p>下载上述工具中的 apktool，解压得到3个文件：aapt.exe，apktool.bat，apktool.jar ，将需要反编译的APK文件放到该目录下，<br>打开命令行界面（运行-CMD） ，定位到apktool文件夹，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d [-s] -f &lt;apkPath&gt; -o &lt;folderPath&gt;</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/6b0fdc0dgw1f9pqoo5xysj20la06ijto.jpg" alt=""></p><h5 id="APK-反编译得到-Java-源代码"><a href="#APK-反编译得到-Java-源代码" class="headerlink" title="APK 反编译得到 Java 源代码"></a>APK 反编译得到 Java 源代码</h5><p>将要反编译的 APK 后缀名改为 .rar 或 .zip，并解压，得到其中的额 classes.dex 文件（它就是java文件编译再通过dx工具打包而成的），将获取到的 classes.dex 放到之前解压出来的工具 dex2jar 文件夹内</p><p>在命令行下定位到 dex2jar.bat 所在目录，输入 dex2jar.bat classes.dex，效果如下：</p><p><img src="http://ww4.sinaimg.cn/large/6b0fdc0dgw1f9pr3dwtu6j20aq01q3yq.jpg" alt=""></p><p>在改目录下会生成一个 classes_dex2jar.jar 的文件，然后打开工具jd-gui文件夹里的 jd-gui.exe ，之后用该工具打开之前生成的 classes_dex2jar.jar 文件，便可以看到源码了，效果如下：</p><p><img src="http://ww4.sinaimg.cn/large/6b0fdc0dgw1f9pr73ldmxj20sy0k3thk.jpg" alt=""></p><p>嘿嘿，加密算法也就这样找到了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个 app 的爬虫，发现密码竟然是加密的，模拟登录做不了，就想研究一下 Android APK 的反编译，把加密算法拿出来，发现不难。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>在 CentOS7 PHP7 安装使用 MongoDB</title>
    <link href="http://krasie.github.io/2016/08/28/centos7-php7-install-mongodb/"/>
    <id>http://krasie.github.io/2016/08/28/centos7-php7-install-mongodb/</id>
    <published>2016-08-28T12:08:37.000Z</published>
    <updated>2017-11-21T02:37:56.904Z</updated>
    
    <content type="html"><![CDATA[<p>基于 CentOS 7 和 PHP 7 安装</p><h4 id="安装-PECL"><a href="#安装-PECL" class="headerlink" title="安装 PECL"></a>安装 PECL</h4><p>我的 PHP 7 是用 yum 命令安装的，说以并没有 PECL。如果编译安装的就不用再安装了，在 php 的安装目录下就有。</p><p>如果不太清楚有没有安装 PECL 的话可以用 Linux 的 find 命令找好有没有这东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find \ -name <span class="string">"pecl"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>没有的话就要安装咯（下面是 PHP 7 的安装方法，如果是 PHP 5.x 的可以把’70w’去掉就可以了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install php70w-pear php70w-devel</span><br></pre></td></tr></table></figure><h4 id="安装-PHP-MongoDB-扩展"><a href="#安装-PHP-MongoDB-扩展" class="headerlink" title="安装 PHP MongoDB 扩展"></a>安装 PHP MongoDB 扩展</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pecl install mongodb</span><br></pre></td></tr></table></figure><p>如果还没还装 gcc 会编译不了。所以先安装好 gcc </p><h4 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h4><p>建立源文件 /etc/yum.repos.d/mongodb.repo</p><p>根据系统选择以下内容：</p><p>64位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mongodb]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>32位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mongodb]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>建立源之后，用 yum 安装就很简单了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install mongodb-org mongodb-org-server</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start mongod</span><br></pre></td></tr></table></figure><p>查看启动状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps auxw | grep mongod</span><br><span class="line">$ systemctl status mongod</span><br></pre></td></tr></table></figure><p>没问题的话就可以使用 mongo 客户端 链接 MongoDB Server，使用以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于 CentOS 7 和 PHP 7 安装&lt;/p&gt;
&lt;h4 id=&quot;安装-PECL&quot;&gt;&lt;a href=&quot;#安装-PECL&quot; class=&quot;headerlink&quot; title=&quot;安装 PECL&quot;&gt;&lt;/a&gt;安装 PECL&lt;/h4&gt;&lt;p&gt;我的 PHP 7 是用 yum 命令安装的，说以并没有 PECL。如果编译安装的就不用再安装了，在 php 的安装目录下就有。&lt;/p&gt;
&lt;p&gt;如果不太清楚有没有安装 PECL 的话可以用 Linux 的 find 命令找好有没有这东西&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ find \ -name &lt;span class=&quot;string&quot;&gt;&quot;pecl&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>centos7 yum 安装 Nginx+PHP7+MariaDB</title>
    <link href="http://krasie.github.io/2016/08/17/centos7-install-nginx-php7-mariadb/"/>
    <id>http://krasie.github.io/2016/08/17/centos7-install-nginx-php7-mariadb/</id>
    <published>2016-08-17T05:00:39.000Z</published>
    <updated>2017-11-21T02:37:29.112Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装-PHP7"><a href="#安装-PHP7" class="headerlink" title="安装 PHP7"></a>安装 PHP7</h4><p>先添加源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure><a id="more"></a><p>用 yum 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install php70w</span><br></pre></td></tr></table></figure><p>检查 php 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ php -v</span><br><span class="line">PHP 7.0.9 (cli) (built: Jul 21 2016 15:42:36) ( NTS )</span><br><span class="line">Copyright (c) 1997-2016 The PHP Group</span><br><span class="line">Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies</span><br></pre></td></tr></table></figure><p>安装 php-fpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install php70w-fpm</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start php-fpm</span><br></pre></td></tr></table></figure><h4 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h4><p>添加源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0. el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install nginx</span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -v</span><br><span class="line">nginx version: nginx/1.10.1</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start nginx</span><br></pre></td></tr></table></figure><p>默认的配置文件在 /etc/nginx 路径下，使用该配置已经可以正确地运行nginx；如需要自定义，修改其下的 nginx.conf 等文件即可。</p><p>nginx报 File not found 错误</p><p>原因可能很多，但对于初学者。大部分应该是/etc/nginx/conf.d/default.conf里面的php解析部分配置不对。<br>解决的话就是把root定义，在server下加上，这样root的作用域就扩大了。把location ~ .php${里面的root删除。fastcgi_param部分改为$document_root$fastcgi_script_name;</p><h4 id="安装MariaDB"><a href="#安装MariaDB" class="headerlink" title="安装MariaDB"></a>安装MariaDB</h4><p>MariaDB数据库管理系统是 MySQL 的一个分支，主要由开源社区在维护，采用 GPL 授权许可。开发这个分支的原因之一是：甲骨文公司收购了 MySQL 后，有将 MySQL 闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB 是完全兼容 MySQL 的，包括 API 和命令行。</p><p>系统自带的repos安装很简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb mariadb-server</span><br></pre></td></tr></table></figure><p>systemctl start mariadb ==&gt; 启动mariadb<br>systemctl enable mariadb ==&gt; 开机自启动<br>mysql_secure_installation ==&gt; 设置 root密码等相关<br>mysql -uroot -p123456 ==&gt; 测试登录</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装-PHP7&quot;&gt;&lt;a href=&quot;#安装-PHP7&quot; class=&quot;headerlink&quot; title=&quot;安装 PHP7&quot;&gt;&lt;/a&gt;安装 PHP7&lt;/h4&gt;&lt;p&gt;先添加源&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>在 Win10 上安装 Docker 及 Docker 常用命令</title>
    <link href="http://krasie.github.io/2016/08/14/install-docker-for-windows10/"/>
    <id>http://krasie.github.io/2016/08/14/install-docker-for-windows10/</id>
    <published>2016-08-14T03:03:01.000Z</published>
    <updated>2017-11-21T02:35:56.328Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h4><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p><a id="more"></a><p>开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>此方法适用 win10 64位专业版1511更新版本或以上，并开启 Hyper-V 功能。其他系统可以当然也可以安装 Docker,不过其他系统不再这里阐述了XD</p><h6 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h6><p>可以去<a href="https://download.docker.com/win/stable/InstallDocker.msi" target="_blank" rel="noopener">官网下载安装包</a>，下载完成后直接安装，直接打开安装，按下一步就可以了。安装完成启动（完成页有启动选项，默认是选择的，注意不要取消了。）</p><p><img src="https://docs.docker.com/docker-for-windows/images/installer-finishes.png" alt="Install complete"></p><h5 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h5><p>安装完成后 Docker 会自动启动，看到这个界面就表示启动成功了。你可以在任务栏上看到 Docker 在运行。</p><p><img src="https://docs.docker.com/docker-for-windows/images/win-install-success-popup.png" alt="install success"></p><h5 id="查看-Docker-版本"><a href="#查看-Docker-版本" class="headerlink" title="查看 Docker 版本"></a>查看 Docker 版本</h5><p>启动成功后可以使用 cmd，或者 powershell 命令行工具去操作，例如输入下面命令查看版本。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 1.12.0, build 8eab29e, experimental</span><br></pre></td></tr></table></figure><h4 id="运行实例"><a href="#运行实例" class="headerlink" title="运行实例"></a>运行实例</h4><p><code>docker run</code> 是 Docker 安装和运行命令，如果没有安装，会自动安装后运行。</p><h5 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure><h5 id="Ubuntu-Bash"><a href="#Ubuntu-Bash" class="headerlink" title="Ubuntu Bash"></a>Ubuntu Bash</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it ubuntu bash</span><br></pre></td></tr></table></figure><h5 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 --name webserver nginx</span><br></pre></td></tr></table></figure><p>用浏览器打开<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a>可以看到 Nginx 默认页</p><p>用 <code>docker ps</code> 可以查看容器运行详细。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h4><h5 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h5><p>启动容器并启动 bash（交互方式）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t &lt;image_name/continar_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>启动容器以后台方式运行（更通用的方式）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -it  image_name</span><br></pre></td></tr></table></figure><h5 id="附着到容器"><a href="#附着到容器" class="headerlink" title="附着到容器"></a>附着到容器</h5><p>附着到正在运行的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker attach &lt;id、container_name&gt;</span><br></pre></td></tr></table></figure><p>进入正在运行的容器内部，同时运行 bash(比attach更好用)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -t -i &lt;id/container_name&gt;  /bin/bash</span><br></pre></td></tr></table></figure><h5 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h5><p>查看容器日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;id/container_name&gt;</span><br></pre></td></tr></table></figure><p>实时查看日志输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f &lt;id/container_name&gt; (类似 tail -f) (带上时间戳-t)</span><br></pre></td></tr></table></figure><h5 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h5><p>列出当前所有正在运行的 container</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure><p>用一行列出所有正在运行的 container（容器多的时候非常清晰）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps | less -S</span><br></pre></td></tr></table></figure><p>列出所有的 container</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><p>列出最近一次启动的 container</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -l</span><br></pre></td></tr></table></figure><p>显示一个运行的容器里面的进程信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker top Name/ID</span><br></pre></td></tr></table></figure><p>查看容器内部详情细节：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect &lt;id/container_name&gt;</span><br></pre></td></tr></table></figure><p>在容器中安装新的程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run image_name apt-get install -y app_name</span><br></pre></td></tr></table></figure><p>从容器里面拷贝文件/目录到本地一个路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker cp Name:/container_path to_path  </span><br><span class="line">$ docker cp ID:/container_path to_path</span><br></pre></td></tr></table></figure><p>保存对容器的修改（commit） 当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit ID new_image_name</span><br></pre></td></tr></table></figure><p>删除单个容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm Name/ID</span><br></pre></td></tr></table></figure></p><p>删除所有容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure></p><p>停止、启动、杀死、重启一个容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop Name/ID  </span><br><span class="line">$ docker start Name/ID  </span><br><span class="line">$ docker <span class="built_in">kill</span> Name/ID  </span><br><span class="line">$ docker restart name/ID</span><br></pre></td></tr></table></figure></p><h2 id="操作Image"><a href="#操作Image" class="headerlink" title="操作Image"></a>操作Image</h2><p>列出镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure></p><p>从 dockerhub 检索 image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker search image_name</span><br></pre></td></tr></table></figure></p><p>下载image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull image_name</span><br></pre></td></tr></table></figure></p><p>删除一个或者多个镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi image_name</span><br></pre></td></tr></table></figure><p>显示一个镜像的历史<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker history image_name</span><br></pre></td></tr></table></figure></p><p>发布 Docker 镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push new_image_name</span><br></pre></td></tr></table></figure></p><p>ps:要发布到私有Registry中的镜像，在镜像命名中需要带上Registry的域名（如果非80端口，同时需要带上端口号）比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push dockerhub.yourdomain.com:443/hello.demo.kdemo:v1.0</span><br></pre></td></tr></table></figure></p><p>拉取 Docker 镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull image_name</span><br></pre></td></tr></table></figure></p><h2 id="查看-Docker-基础信息"><a href="#查看-Docker-基础信息" class="headerlink" title="查看 Docker 基础信息"></a>查看 Docker 基础信息</h2><p>查看docker版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br></pre></td></tr></table></figure></p><p>查看docker系统的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=&quot;Docker 简介&quot;&gt;&lt;/a&gt;Docker 简介&lt;/h4&gt;&lt;p&gt;作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>通过 Hexo 在 GitHub 搭建博客</title>
    <link href="http://krasie.github.io/2016/08/13/hexo-guide/"/>
    <id>http://krasie.github.io/2016/08/13/hexo-guide/</id>
    <published>2016-08-13T13:02:12.000Z</published>
    <updated>2017-11-21T03:26:28.825Z</updated>
    
    <content type="html"><![CDATA[<p>好了，新博客终于搭建成功了。很早在之前搭建 SAE 搭了个 WordPress,后来SAE免费政策变更了，云豆耗得太快，就把博客关了。这次通过 Hxeo 在 GitHub 搭建博客。随便把过程记下来，当做笔记吧。</p><a id="more"></a><p>我的电脑是 win10 系统。所以教程是基于 win10 ,其他系统可能不适用。</p><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><h5 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h5><p>Hexo 是一款基于 Node.js 的静态博客框架,所以电脑要先安装 Node.js 环境，到 Node.js 官网下载即可。</p><h5 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h5><p>把 Hexo 提交到 GitHub 的工具。</p><h5 id="GitHub-账号"><a href="#GitHub-账号" class="headerlink" title="GitHub 账号"></a>GitHub 账号</h5><p>（这个不用说了吧，注册一个GitHub账号）</p><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>Node和Git都安装好后,首先创建一个文件夹，如blog，用户存放hexo的配置文件，然后进入blog里安装Hexo。</p><h5 id="安装-Hexo-1"><a href="#安装-Hexo-1" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h5 id="执行-init-命令初始化-Hexo"><a href="#执行-init-命令初始化-Hexo" class="headerlink" title="执行 init 命令初始化 Hexo"></a>执行 init 命令初始化 Hexo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>好了，到这里博客就生成了！blog 就是你的博客根目录，所有的操作都在里面进行。</p><h5 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate（hexo g也可以）</span><br></pre></td></tr></table></figure><h5 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h5><p>启动本地服务，进行文章预览调试，命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server（hexo s也可以）</span><br></pre></td></tr></table></figure><p>如果没出问题的话，在浏览器输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，就已经能看到博客了。</p><h4 id="配置-Github"><a href="#配置-Github" class="headerlink" title="配置 Github"></a>配置 Github</h4><h5 id="建立-Repository"><a href="#建立-Repository" class="headerlink" title="建立 Repository"></a>建立 Repository</h5><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法。<br>例如我的 GitHub 用户名是 krasie，那我的仓库名是 krasie.github.io</p><h5 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 _config.yml"></a>修改 _config.yml</h5><p>在博客根目录有个 _config.yml 的配置文件。打开这个文件修改它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/krasie/krasie.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>repository 那里记得修改为你们自己的地址。GitHub 记得添加 SSH Keys，不然提交不了。</p><h5 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h5><p>执行部署命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>然后再浏览器中输入 <a href="http://krasie.github.io/">http://krasie.github.io/</a> 就行了，我的 GitHub 的账户叫 krasie,把这个改成你 GitHub 的账户名就行了</p><p>每次部署的步骤，可按以下三步来进行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>一些常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好了，新博客终于搭建成功了。很早在之前搭建 SAE 搭了个 WordPress,后来SAE免费政策变更了，云豆耗得太快，就把博客关了。这次通过 Hxeo 在 GitHub 搭建博客。随便把过程记下来，当做笔记吧。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://krasie.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://krasie.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
